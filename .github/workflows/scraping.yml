name: Coletor de Seguidores Diário
on:
  schedule:
    - cron: '0 5 * * *'  # Executa todos os dias às 5:00 UTC
  workflow_dispatch:  # Permite execução manual

# Definir permissões necessárias para commits
permissions:
  contents: write

jobs:
  scrape:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4
        
      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Configurar Chrome
        uses: browser-actions/setup-chrome@latest
        
      - name: Instalar dependências
        run: |
          pip install selenium webdriver-manager pandas openpyxl
          
      - name: Verificar ambiente
        run: |
          echo "Diretório atual: $(pwd)"
          echo "Conteúdo do diretório: $(ls -la)"
          echo "Versão do Chrome: $(chrome --version)"
          
      - name: Verificar existência do arquivo de configuração
        run: |
          if [ ! -f "config.json" ]; then
            echo "Aviso: Arquivo config.json não encontrado!"
            # Criar um arquivo config.json básico para teste
            echo "Criando arquivo config.json básico para teste"
            echo '[{"nome_pagina": "Teste", "rede": "LinkedIn", "url": "https://www.linkedin.com/company/tereos/", "xpath": "//*[@class=\"org-top-card-summary__follower-count\"]"}]' > config.json
            cat config.json
          else
            echo "Arquivo config.json encontrado!"
          fi
          
      - name: Executar script de coleta
        run: |
          # Executar com mais tempo de timeout
          python scraper.py
          
      - name: Configurar Git para commit
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          
      - name: Commit e push dos novos dados
        run: |
          # Criar diretório para logs se não existir
          mkdir -p logs
          # Mover arquivo de log para o diretório de logs com timestamp
          if [ -f "scraper.log" ]; then
            mv scraper.log logs/scraper_$(date +%Y%m%d_%H%M%S).log
          fi
          
          # Verificar se o arquivo de resultados existe
          if [ -f "resultados.csv" ]; then
            git add resultados.csv
            git add logs/
            git add screenshots/ || echo "Sem screenshots para commit"
            git add debug_*.html || echo "Sem arquivos de debug HTML para commit"
            git commit -m "Atualização diária de dados [$(date)]" || echo "Sem alterações para commit"
            git push
          else
            echo "Arquivo resultados.csv não foi gerado!"
            echo "Criando arquivo vazio para garantir que o workflow não falhe"
            echo "data,nome,rede,seguidores" > resultados.csv
            git add resultados.csv
            git add logs/
            git commit -m "Adicionando arquivo de resultados vazio [$(date)]" || echo "Sem alterações para commit"
            git push
          fi
